DROP_ANSWER_VIEWS:                     
SELECT qlik_remove_all_qlik_view();     

DROP TABLE DROP_ANSWER_VIEWS;           


BUILD_RECORDSET_VIEWS:                 
SELECT qlik_flatten_all_suba_view('1/01/2015');   

DROP TABLE BUILD_RECORDSET_VIEWS;

Recordset_security_interim:
Noconcatenate
LOAD * INLINE [
	entry_exit_id,%interim_recordset_id,%suba_provider_creating_id
];


RECORDSET_LIST_INTERIM:
//SELECT table_name AS sp_table_name, 'sa_' || SUBSTRING(table_name, 14, CHAR_LENGTH(table_name)) AS qlik_table_name,  SUBSTRING(table_name, 14, CHAR_LENGTH(table_name)) AS table_name_only
SELECT table_name AS sp_table_name, 'client_' || SUBSTRING(table_name, 14, CHAR_LENGTH(table_name)) AS qlik_table_name,  SUBSTRING(table_name, 14, CHAR_LENGTH(table_name)) AS table_name_only
FROM information_schema.tables
WHERE table_name ILIKE 'qlik_sclient_%'
ORDER BY table_name;


LET NumRows=NoOfRows('RECORDSET_LIST_INTERIM');
//LET NumRows=3;
FOR i=0 to $(NumRows)-1

  LET varRecordSetTableName=Peek('sp_table_name',$(i),'RECORDSET_LIST_INTERIM');
  LET varRecordSetQlikName=Peek('qlik_table_name',$(i),'RECORDSET_LIST_INTERIM');
  LET varRecordSetTableNameOnly=Peek('table_name_only',$(i),'RECORDSET_LIST_INTERIM');
  //LET varRecordSetQlikName_Interim='$(varRecordSetQlikName)' & '_interim';
  LET varRecordSetQlikName_Interim='$(varRecordSetQlikName)' & '_review';
   LET varRecordSetTableNameOnlyTruncCustomEndDate = If((len('$(varRecordSetTableNameOnly)') <= 20),'$(varRecordSetTableNameOnly)' & 'end_1',left('$(varRecordSetTableNameOnly)', 20)& 'end_1');
  LET varRecordSetTableNameOnlyTruncEndDate = '$(varRecordSetTableNameOnly)' & 'enddate';
  LET varRecordSetQlikName_Ucase_Interim = Upper(right('$(varRecordSetQlikName)', (len('$(varRecordSetQlikName)'))-7));
  
  $(varRecordSetQlikName):
  SELECT * FROM $(varRecordSetTableName);

  //***************************************************INTERIM
  $(varRecordSetQlikName_Interim):
  Noconcatenate
  LOAD DISTINCT
  *,
  recordset_id AS 'client_$(varRecordSetQlikName_Ucase_Interim)RECORDSET_ID_review'
  RESIDENT $(varRecordSetQlikName);
  
   CustomEndFieldCheck:
  SELECT *
  FROM INFORMATION_SCHEMA.columns ft Where ft.column_name ilike '$(varRecordSetTableNameOnlyTruncCustomEndDate)';
  
  
  LET varRecordSetTableNameOnlyUseEndDate = If(NoOfRows('CustomEndFieldCheck') <> 0,'$(varRecordSetTableNameOnlyTruncCustomEndDate)','$(varRecordSetTableNameOnlyTruncEndDate)');


RS_Interim:
  SELECT DISTINCT ee.entry_exit_id, ft.recordset_id, dr.provider_creating_id, p.name, dr.user_creating_id, u.name AS user_name,
    plv(eer.point_in_time_type_id) AS entry_exit_review_pit_type,
    plv(eer.review_type_id) AS entry_exit_review_type,
    eer.review_date::DATE AS entry_exit_review_date,
	eer.entry_exit_review_id
  FROM $(varRecordSetTableName) ft
  JOIN da_recordset dr ON dr.recordset_id = ft.recordset_id
  INNER JOIN sp_provider p on p.provider_id = dr.provider_creating_id
  INNER JOIN sp_user u on u.user_id = dr.user_creating_id
  INNER JOIN sp_entry_exit ee ON (ee.client_id = ft.client_id)
    INNER JOIN sp_entry_exit_review eer ON (eer.entry_exit_id = ee.entry_exit_id)
    INNER JOIN sp_picklist_value pv ON (pv.picklist_value_id = eer.point_in_time_type_id)  
  INNER JOIN sp_provider_tree belowtree ON (belowtree.ancestor_provider_id = ee.provider_id)
  WHERE 
  (ee.active = TRUE) AND ((ee.exit_date IS NULL) OR (ee.exit_date >= '$(vEntryExitDate)'))
    AND (eer.active = TRUE) 
    AND pv.code NOT IN ('EEPOINTINTIME_EXIT','EEPOINTINTIME_ENTRY')
  AND (belowtree.provider_id = dr.provider_creating_id)
    AND (ft.$(varRecordSetTableNameOnly)startdate::DATE <= eer.review_date::DATE)
    AND ((ft.$(varRecordSetTableNameOnlyUseEndDate)::DATE IS NULL) 
	OR (ft.$(varRecordSetTableNameOnlyUseEndDate)::DATE >= eer.review_date::DATE))
  UNION
  SELECT DISTINCT ee.entry_exit_id, ft.recordset_id, dr.provider_creating_id, p.name, dr.user_creating_id, u.name AS user_name,
    plv(eer.point_in_time_type_id) AS entry_exit_review_pit_type,
    plv(eer.review_type_id) AS entry_exit_review_type,
    eer.review_date::DATE AS entry_exit_review_date ,
    eer.entry_exit_review_id	
  FROM $(varRecordSetTableName) ft
  JOIN da_recordset dr ON dr.recordset_id = ft.recordset_id
  INNER JOIN sp_provider p on p.provider_id = dr.provider_creating_id
  INNER JOIN sp_user u on u.user_id = dr.user_creating_id
  INNER JOIN sp_entry_exit ee ON (ee.client_id = ft.client_id)
    INNER JOIN sp_entry_exit_review eer ON (eer.entry_exit_id = ee.entry_exit_id)
    INNER JOIN sp_picklist_value pv ON (pv.picklist_value_id = eer.point_in_time_type_id)  
  INNER JOIN sp_provider_tree abovetree ON (abovetree.provider_id = ee.provider_id)
  WHERE 
  (ee.active = TRUE) AND ((ee.exit_date IS NULL) OR (ee.exit_date >= '$(vEntryExitDate)'))
    AND (eer.active = TRUE) --AND (eer.review_date >= '$(vEntryExitDate)')
    AND pv.code NOT IN ('EEPOINTINTIME_EXIT','EEPOINTINTIME_ENTRY')
  AND (abovetree.ancestor_provider_id = dr.provider_creating_id)
    AND (ft.$(varRecordSetTableNameOnly)startdate::DATE <= eer.review_date::DATE)
    AND ((ft.$(varRecordSetTableNameOnlyUseEndDate)::DATE IS NULL) OR 
	(ft.$(varRecordSetTableNameOnlyUseEndDate)::DATE >= eer.review_date::DATE));
	
RS_Interim_Explicit:	
SELECT DISTINCT ee.entry_exit_id, ft.recordset_id,dr.question_id,dr.provider_creating_id
  FROM $(varRecordSetTableName) ft
  JOIN da_recordset dr ON dr.recordset_id = ft.recordset_id
  INNER JOIN sp_entry_exit ee ON (ee.client_id = ft.client_id)
  INNER JOIN sp_entry_exit_review eer USING (entry_exit_id)
  WHERE 
  (ee.active = TRUE) AND (eer.active = TRUE) AND 
  (eer.review_date::DATE >= '$(vEntryExitDate)')
  AND ((ee.exit_date IS NULL) OR (ee.exit_date >= '$(vEntryExitDate)'))
  AND dr.covered_by_roi
  AND ((((ft.$(varRecordSetTableNameOnly)startdate::DATE <= eer.review_date::DATE)) 
  AND (ft.$(varRecordSetTableNameOnlyUseEndDate)::DATE IS NULL)) 
                   OR (((ft.$(varRecordSetTableNameOnly)startdate::DATE <= eer.review_date::DATE)) 
                   AND ((ft.$(varRecordSetTableNameOnlyUseEndDate)::DATE >= eer.review_date::DATE) 
                   OR ((ft.$(varRecordSetTableNameOnlyUseEndDate)::DATE >= date(now()))))));


  INNER JOIN($(varRecordSetQlikName_Interim))
  LOAD DISTINCT
  recordset_id,
  entry_exit_review_id							AS [Entry Exit Review Id],
  provider_creating_id AS [client_$(varRecordSetQlikName_Ucase_Interim)_Provider_Creating_Review],
  name AS [client_$(varRecordSetQlikName_Ucase_Interim)_Provider_Name_Creating_Review],
  user_creating_id AS [client_$(varRecordSetQlikName_Ucase_Interim)_User_Created_By_Id_Review],
  user_name AS [client_$(varRecordSetQlikName_Ucase_Interim)_User_Created_By_Review]
  RESIDENT RS_Interim;
  
  CONCATENATE(Recordset_security_interim)
  LOAD
  entry_exit_id, 
  recordset_id as %interim_recordset_id,
  recordset_id AS 'client_$(varRecordSetQlikName_Ucase_Interim)RECORDSET_ID_review',
  provider_creating_id as %suba_provider_creating_id
  RESIDENT RS_Interim_Explicit;
  DROP TABLE RS_Interim_Explicit;
  
  
  TEMP_SUBA_REVIEW:
  Noconcatenate
  LOAD DISTINCT
  entry_exit_review_pit_type						AS [Entry Exit Review PIT Type],
  entry_exit_review_type							AS [Entry Exit Review Type],
  entry_exit_review_date							AS [Entry Exit Review Date],
  entry_exit_review_id							    AS  [Entry Exit Review Id]
  RESIDENT RS_Interim;
  
   
 CONCATENATE(FACT_Entry_Exit_Review)
  LOAD
 [Entry Exit Review PIT Type],
 [Entry Exit Review Type],
 [Entry Exit Review Date],
 [Entry Exit Review Id]
  RESIDENT TEMP_SUBA_REVIEW
  WHERE NOT EXISTS(match_review_id, [Entry Exit Review Id]);
 
 
  DROP TABLE TEMP_SUBA_REVIEW;
  
  DROP TABLE RS_Interim;
  
  DROP FIELDS client_id FROM $(varRecordSetQlikName_Interim);
  DROP FIELDS recordset_id,[Entry Exit Review Id] FROM $(varRecordSetQlikName_Interim);


  FieldMapSaClientInterim:
  Mapping SQL
    SELECT lower(dq.virt_field_name) AS oldnames, 'client_' || dq.virt_field_name || '_review'  AS newnames  
    FROM da_question dq
    INNER JOIN da_question dq_p ON (dq_p.question_id = dq.parent_id)
    WHERE
      ((dq_p.reportable_flag = TRUE) OR (dq_p.ee_reportable_flag = TRUE) OR (dq_p.service_reportable_flag = TRUE))
      AND ((dq.start_date_flag = FALSE) AND (dq.end_date_flag = FALSE))
      AND ((dq.virt_field_name <> (dq_p.virt_field_name || 'ENDDATE'))) AND ((dq.virt_field_name <> (dq_p.virt_field_name || 'STARTDATE')))
    UNION
    SELECT lower(dq.virt_field_name) ||'_1' AS oldnames, 'client_' || dq.virt_field_name || '1_review'  AS newnames  
    FROM da_question dq
    INNER JOIN da_question dq_p ON (dq_p.question_id = dq.parent_id)
    WHERE
      ((dq_p.reportable_flag = TRUE) OR (dq_p.ee_reportable_flag = TRUE) OR (dq_p.service_reportable_flag = TRUE))
      AND ((dq.start_date_flag = FALSE) OR (dq.end_date_flag = FALSE))
      AND ((dq.virt_field_name = (dq_p.virt_field_name || 'ENDDATE'))) OR ((dq.virt_field_name = (dq_p.virt_field_name || 'STARTDATE')))  
     UNION
     SELECT lower(dq.virt_field_name) ||'_1' AS oldnames, 'client_' || dq.virt_field_name || '1_review'  AS newnames  
    FROM da_question dq
    INNER JOIN da_question dq_p ON (dq_p.question_id = dq.parent_id)
    WHERE
      ((dq_p.reportable_flag = TRUE) OR (dq_p.ee_reportable_flag = TRUE) OR (dq_p.service_reportable_flag = TRUE))
      AND ((dq.start_date_flag = FALSE))
      AND (((dq.virt_field_name = (dq_p.virt_field_name || 'START')))) 
          --OR (dq.virt_field_name = (left(dq_p.virt_field_name, (length(dq.virt_field_name) - 3)) || 'END') AND length(dq_p.virt_field_name) > 20))	  
    UNION

    SELECT lower(dq.virt_field_name) ||'_1' AS oldnames, 'client_' || dq.virt_field_name || '_review'  AS newnames  
    FROM da_question dq
    INNER JOIN da_question dq_p ON (dq_p.question_id = dq.parent_id)
    WHERE
      ((dq_p.reportable_flag = TRUE) OR (dq_p.ee_reportable_flag = TRUE) OR (dq_p.service_reportable_flag = TRUE))
      AND ((dq.end_date_flag = FALSE))
      AND (((dq.virt_field_name = (dq_p.virt_field_name || 'END'))) 
          OR (dq.virt_field_name = (left(dq_p.virt_field_name, (length(dq.virt_field_name) - 3)) || 'END') AND length(dq_p.virt_field_name) > 20))	  
    UNION   
    SELECT
    CASE WHEN dq.start_date_flag = TRUE THEN lower(dq_p.virt_field_name) || 'startdate'
		  WHEN (dq.virt_field_name = (dq_p.virt_field_name || 'END') AND length(dq_p.virt_field_name) <= 20) AND dq.end_date_flag = TRUE THEN lower(dq_p.virt_field_name) || 'enddate'
		WHEN (dq.virt_field_name = (left(dq_p.virt_field_name, (length(dq.virt_field_name) - 3)) || 'END') AND dq.end_date_flag = TRUE AND length(dq_p.virt_field_name) > 20) THEN lower(dq_p.virt_field_name) || 'enddate'
    END AS oldnames, 'client_' || dq.virt_field_name || '_review' AS newnames 
    FROM da_question dq
    INNER JOIN da_question dq_p ON (dq_p.question_id = dq.parent_id)
    WHERE
      ((dq_p.reportable_flag = TRUE) OR (dq_p.ee_reportable_flag = TRUE) OR (dq_p.service_reportable_flag = TRUE))
	  AND ((dq.start_date_flag = TRUE) OR (dq.virt_field_name = (dq_p.virt_field_name || 'END') AND length(dq_p.virt_field_name) <= 20) OR ((dq.virt_field_name = (left(dq_p.virt_field_name, (length(dq.virt_field_name) - 3)) || 'END') AND length(dq_p.virt_field_name) > 20)))
    UNION
	SELECT
    CASE WHEN (dq.virt_field_name = (dq_p.virt_field_name || 'END') AND length(dq_p.virt_field_name) <= 20) AND dq.end_date_flag = FALSE THEN lower(dq_p.virt_field_name) || 'enddate'
		WHEN (dq.virt_field_name = (left(dq_p.virt_field_name, (length(dq.virt_field_name) - 3)) || 'END') AND dq.end_date_flag = FALSE AND length(dq_p.virt_field_name) > 20) THEN lower(dq_p.virt_field_name) || 'enddate'
    END AS oldnames, 'client_' || dq.virt_field_name || '1_review' AS newnames 
    FROM da_question dq
    INNER JOIN da_question dq_p ON (dq_p.question_id = dq.parent_id)
    WHERE
      ((dq_p.reportable_flag = TRUE) OR (dq_p.ee_reportable_flag = TRUE) OR (dq_p.service_reportable_flag = TRUE))
	  AND ((dq.start_date_flag = TRUE) OR (dq.virt_field_name = (dq_p.virt_field_name || 'END') AND length(dq_p.virt_field_name) <= 20) OR ((dq.virt_field_name = (left(dq_p.virt_field_name, (length(dq.virt_field_name) - 3)) || 'END') AND length(dq_p.virt_field_name) > 20)));
 Rename Fields using FieldMapSaClientInterim;
  
    DROP TABLE $(varRecordSetQlikName);

  LET varStepName='STEPINTERIM_' & $(i) & '_of_' & $(NumRows);
  $(varStepName): select 1;
  DROP TABLE $(varStepName);
  DROP TABLE CustomEndFieldCheck; 

NEXT;

DROP TABLE RECORDSET_LIST_INTERIM;


DROP_ANSWER_VIEWS:
SELECT qlik_remove_all_qlik_view();

DROP TABLE DROP_ANSWER_VIEWS;
DROP FIELDS [match_review_id] FROM FACT_Entry_Exit_Review;

//DROP TABLE FACT_Entry_Exit_Review;

